library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity guitar_tuner is
    Port ( 
        input_clk : in std_logic;    -- clock de entrada
        input_data : in std_logic_vector(11 downto 0);    -- sinal discreto de entrada
        output_data : out std_logic_vector(6 downto 0);   -- frequência da guitarra em Hz
        output_enable : out std_logic    -- habilita/desabilita a saída do afinador
    );
end guitar_tuner;

architecture Behavioral of guitar_tuner is
    signal input_data_real : signed(11 downto 0);   -- sinal discreto convertido em número real
    signal fft_output : std_logic_vector(11 downto 0);    -- sinal discreto da saída FFT
    signal peak_found : std_logic;    -- indica se um pico foi encontrado na análise de frequência
    signal bin_counter : integer range 0 to 31;   -- contador para encontrar a frequência dominante
    signal bin_max : unsigned(11 downto 0);   -- valor máximo encontrado na análise de frequência
    signal bin_number : unsigned(4 downto 0);  -- índice da bin com valor máximo
    signal tune_freq : unsigned(5 downto 0);  -- frequência padrão de afinação
    signal output_enable_internal : std_logic;  -- habilita/desabilita a saída interna do afinador

begin

    input_data_real <= signed(input_data);    -- converte o sinal discreto em número real

    process(input_clk)
    begin
        if rising_edge(input_clk) then

            -- Aplica a FFT no sinal de entrada
            fft_output <= FFT(input_data_real);

            -- Verifica se um pico de frequência foi encontrado
            if fft_output(10) > fft_output(11) and fft_output(10) > fft_output(9) then
                peak_found <= '1';
            else
                peak_found <= '0';
            end if;

            -- Encontra a frequência dominante
            if peak_found = '1' then
                bin_counter <= bin_counter + 1;
                if fft_output(bin_counter+1) > bin_max then
                    bin_max <= fft_output(bin_counter+1);
                    bin_number <= to_unsigned(bin_counter, 5);
                end if;
                if bin_counter = 31 then
                    bin_counter <= 0;
                end if;
            else
                bin_counter <= 0;
            end if;

            -- Determina a frequência padrão de afinação e exibe a frequência detectada no display de 7 segmentos
            case tune_freq is
                when "000000" =>    -- E2
                    output_data <= "824";    -- 82.4 Hz
                when "000001" =>    -- A2
                    output_data <= "1100";   -- 110.0 Hz
                when "000010" =>    -- D3
                    output_data <= "1468";   -- 146.8 Hz
                when "000011" =>    -- G3
                    output_data <= "1960";   -- 196.0 Hz
                when "000100" =>    -- B3
                    output_data <= "246
